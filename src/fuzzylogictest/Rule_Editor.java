/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fuzzylogictest;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;

/**
 *
 * @author macbookpro
 */
public class Rule_Editor extends javax.swing.JFrame {

private String serviceStrng,foodStrng,tipStrng,weightStrng,fisNameStrng;
    private Boolean serviceIsNot=false,foodIsNot=false,tipIsNot=false,connectionIsOr=false,connectionIsAnd=false;
    DefaultListModel ruleModel = new DefaultListModel();
    private int sayac=0;
    private ArrayList<RuleQueryString> ruleArrayList=new ArrayList<RuleQueryString>();

    public Rule_Editor() {
        initComponents();
        this.setLocation(340, 200);
        ruleList.setModel(ruleModel); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpBtnActionPerformed

    private void con_OrCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_con_OrCheckActionPerformed
        //connection or is selected
       if(con_OrCheck.isSelected()){
        connectionIsOr = true;
       }else
       {
         connectionIsOr = false;
       }
        connectionIsAnd=false;
        con_AndCheck.setSelected(false);
        JOptionPane.showMessageDialog(null, 
" radio button.");
  

    }//GEN-LAST:event_con_OrCheckActionPerformed

    private void deleteRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRuleBtnActionPerformed
        // delete selected rule
        JOptionPane.showMessageDialog(null, 
" Sƒ∞Lƒ∞NECEK ƒ∞NDEX "+ruleList.getSelectedIndex()
);
        
        ruleArrayList.remove(ruleList.getSelectedIndex());
        ruleListesiGuncelle();

    }//GEN-LAST:event_deleteRuleBtnActionPerformed

    private void addRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRuleBtnActionPerformed
        // add rule Button Action
        //rule stringi olusturulur
        RuleQueryString rule = new RuleQueryString() ;
        String ruleStr;
        ruleStr=" if ";
        //if service is/not food is /not then /tip /not
        sayac=ruleArrayList.size()+1;
        if(!serviceIsNot){
            ruleStr+=" (service is "+serviceList.getSelectedValue()+")";
        rule.setService(serviceList.getSelectedValue().toString());  
                    rule.setServiceIsNotBol(false);

        }else{
            rule.setServiceIsNotBol(true);
        }
        if(!foodIsNot){
            ruleStr+="or (food is "+foodList.getSelectedValue()+")";
        rule.setFood(foodList.getSelectedValue().toString());
                    rule.setFoodIsNotBol(false);

        }else{
            rule.setFoodIsNotBol(true);
        }
        if(!tipIsNot){
            ruleStr+="then (tip is "+tipList.getSelectedValue()+")";
         
            rule.setTip(tipList.getSelectedValue().toString());
            rule.setTipIsNotBol(false);

        }else{
            rule.setTipIsNotBol(true);
        }
        ruleStr+="("+weight.getText().toString()+")";
        rule.setWeight(weight.getText().toString());
        
        ruleArrayList.add(rule);
        ruleModel.addElement(sayac+". "+ruleStr);

    }//GEN-LAST:event_addRuleBtnActionPerformed

    private void changeRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRuleBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeRuleBtnActionPerformed

    private void leftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leftBtnActionPerformed

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.setVisible(false);
        new Menu().setVisible(true);
    }//GEN-LAST:event_closeBtnActionPerformed

    private void weightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightActionPerformed

    private void con_AndCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_con_AndCheckActionPerformed
 //connection And is selected
  if(con_AndCheck.isSelected()){
        connectionIsAnd = true;
       }else
       {
         connectionIsAnd = false;
       }
        connectionIsOr=false;
        con_OrCheck.setSelected(false);
        JOptionPane.showMessageDialog(null, 
" radio button.2");
    }//GEN-LAST:event_con_AndCheckActionPerformed

    private void serviceCheckNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceCheckNotActionPerformed
        //services is not check
        if(serviceCheckNot.isSelected()){
            serviceIsNot=true;
            JOptionPane.showMessageDialog(null, 
" servis not true");
        }else{
            serviceIsNot=false;
            JOptionPane.showMessageDialog(null, 
" servis not false");
        }


    }//GEN-LAST:event_serviceCheckNotActionPerformed

    private void foodCheckNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodCheckNotActionPerformed
     //food is not check
         if(foodCheckNot.isSelected()){
            foodIsNot=true;
            JOptionPane.showMessageDialog(null, 
" food not true");
        }else{
            foodIsNot=false;
            JOptionPane.showMessageDialog(null, 
" food not false");
        }

        
    }//GEN-LAST:event_foodCheckNotActionPerformed

    private void tipCheckNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipCheckNotActionPerformed
//tip is not check
        
         if(tipCheckNot.isSelected()){
            tipIsNot=true;
            JOptionPane.showMessageDialog(null, 
" tip not true");
        }else{
            tipIsNot=false;
            JOptionPane.showMessageDialog(null, 
" tip not false");
        }

    }//GEN-LAST:event_tipCheckNotActionPerformed

    private void ruleListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ruleListMouseClicked
        //rule list mouse clicked
        
        

    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rule_Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rule_Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rule_Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rule_Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rule_Editor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRuleBtn;
    private javax.swing.JButton changeRuleBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JRadioButton con_AndCheck;
    private javax.swing.JRadioButton con_OrCheck;
    private javax.swing.JButton deleteRuleBtn;
    private javax.swing.JLabel fisNameLbl;
    private javax.swing.JLabel fislbl;
    private javax.swing.JCheckBox foodCheckNot;
    private javax.swing.JList foodList;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton leftBtn;
    private javax.swing.JButton rightBtn;
    private javax.swing.JList ruleList;
    private javax.swing.JCheckBox serviceCheckNot;
    private javax.swing.JList serviceList;
    private javax.swing.JCheckBox tipCheckNot;
    private javax.swing.JList tipList;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables


    private void ruleListesiGuncelle() {
        ruleModel.clear();
        String str=" if ";
        for(int i=0;i<ruleArrayList.size();i++){
                            ruleModel.addElement((i+1)+". "+ruleArrayList.get(i).toString());

        }

    }

}
